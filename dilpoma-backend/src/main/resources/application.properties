spring.datasource.url=${DB_URL}
spring.datasource.username=${DB_USER}
spring.datasource.password=${DB_PASSWORD}
spring.datasource.driver-class-name=org.postgresql.Driver


recaptcha.private.key=${RECAPTCHA_PRIVATE_KEY}
recaptcha.public.key=${RECAPTCHA_PUBLIC_KEY}

spring.mail.host=smtp.gmail.com
spring.mail.port=587
spring.mail.username=${EMAIL_USER}
spring.mail.password=${EMAIL_PASSWORD}
spring.mail.properties.mail.smtp.auth=true
spring.mail.properties.mail.smtp.starttls.enable=true


currentlyDomainClient=${DOMAIN_CLIENT}
expiryCaptchaForUser=60

security.jwt.token.secret-key=${JWT_SECRET_KEY}
security.jwt.token.expire=3600000


sql.accRoleRep.create = INSERT INTO account_role(account_role_name) VALUES(?);
sql.roleRep.delete = DELETE FROM account_role WHERE account_role_name=?;

sql.account.create=INSERT INTO account(id, first_name,last_name,birth_date,gender,img_url, account_role, status) \
                        VALUES (?,?, ?, ?,?::user_gender,'',?::account_roles, default)
sql.account.findById=SELECT * FROM account WHERE id=?
sql.account.findByEmail=SELECT a.* FROM credentials c JOIN account a ON c.id=a.id WHERE c.email=?
sql.account.updateModerStatus=UPDATE account SET status = NOT status where id = ?
sql.account.updateAccData=UPDATE account \
                        SET first_name = ?, last_name = ?, birth_date = ?, img_url = ?, gender = ?::user_gender \
                        WHERE id = ?



sql.account.findAllBySearchDesc=SELECT id, first_name, last_name, img_url, status FROM account WHERE \
                        account_role = ?::account_roles AND \
                        ((first_name ILIKE CONCAT('%', ?, '%')) OR \
                        (last_name ILIKE CONCAT('%', ?, '%'))) AND \
                        gender::text ILIKE CONCAT('%', ?, '%') AND \
                        status::text ILIKE CONCAT('%', ?, '%') \
                        ORDER BY first_name DESC, last_name DESC LIMIT ? OFFSET ?

sql.account.findAllBySearchAsc=SELECT id, first_name, last_name, img_url, status FROM account WHERE \
                        account_role = ?::account_roles AND \
                        ((first_name ILIKE CONCAT('%', ?, '%')) OR \
                        (last_name ILIKE CONCAT('%', ?, '%'))) AND \
                        gender::text ILIKE CONCAT('%', ?, '%') AND \
                        status::text ILIKE CONCAT('%', ?, '%') \
                        ORDER BY first_name ASC, last_name ASC LIMIT ? OFFSET ?


sql.account.countAllBySearch=SELECT COUNT(id) FROM account WHERE \
                        account_role = ?::account_roles AND \
                        ((first_name ILIKE CONCAT('%', ?, '%')) OR \
                        (last_name ILIKE CONCAT('%', ?, '%'))) AND \
                        gender::text ILIKE CONCAT('%', ?, '%') AND \
                        status::text ILIKE CONCAT('%', ?, '%') 



sql.credentials.create=INSERT INTO credentials(id,email,password) VALUES(?,?,?)
sql.credentials.update=UPDATE credentials SET password=? WHERE email=?
sql.credentials.findById=SELECT * FROM credentials WHERE id=?
sql.credentials.findByEmail=SELECT * FROM credentials WHERE email=?
sql.credentials.insertJwtToken=UPDATE credentials SET access_token=? WHERE email=?
sql.credentials.countEmailUsages=select count(email) from credentials where email = ?


sql.passwordResetToken.create=INSERT INTO password_reset_token(reset_token, expiry_date, account_id, active) VALUES(?,?,?,?)
sql.passwordResetToken.findByAccountId=SELECT * FROM password_reset_token WHERE account_id = ?
sql.passwordResetToken.disableAllActiveSessionResetLink=UPDATE password_reset_token SET active=false WHERE account_id=? AND active=true;
sql.passwordResetToken.findByToken=SELECT * FROM password_reset_token WHERE reset_token=?
sql.passwordResetToken.findById=SELECT * FROM password_reset_token WHERE id = ?
sql.passwordResetToken.update=UPDATE password_reset_token SET reset_token=?,expiry_date=?,account_id=?,active=? WHERE id = ?


sql.unconfirmedModer.create=INSERT INTO unconfirmed_moderator(id, moder_token, expiry_date, email, first_name, last_name, birth_date, gender) \
                        VALUES (default, ?, ?, ?, ?, ?, ?, ?::user_gender)
sql.unconfirmedModer.getByToken=SELECT * FROM unconfirmed_moderator WHERE moder_token = ?
sql.unconfirmedModer.getLatestExpiryDate=SELECT max(expiry_date) FROM unconfirmed_moderator where email = ?

sql.wrongAttemptLogin.create=INSERT INTO wrong_attempt_login(ip,expiry_time,count_wrong_attempts) values(?, ?, ?)
sql.wrongAttemptLogin.update=UPDATE wrong_attempt_login SET ip=?,expiry_time=?,count_wrong_attempts=? WHERE id=?
sql.wrongAttemptLogin.delete=DELETE FROM wrong_attempt_login WHERE id=?
sql.wrongAttemptLogin.findById=SELECT * FROM wrong_attempt_login WHERE id=?
sql.wrongAttemptLogin.findByIpAndTime=SELECT * FROM wrong_attempt_login WHERE ip=? AND expiry_time > ?

sql.friendship.create=INSERT INTO friendship(inviter_id,friend_id) values (?,?)
sql.friendship.delete=DELETE FROM friendship WHERE id=?
sql.friendship.deleteByInviterAndFriend=DELETE FROM friendship WHERE (inviter_id=? AND friend_id=?) OR (inviter_id=? AND friend_id=?)
sql.friendship.updateStatusByInviterAndFriend=UPDATE friendship SET status = ?::friendship_status WHERE (inviter_id =? AND friend_id =?)
sql.friendship.findByInviterAndFriend= SELECT COUNT(*) FROM friendship \
                                                 WHERE (inviter_id =? AND friend_id =?) OR (friend_id =? AND inviter_id =?)

sql.ingredient.create=INSERT INTO ingredient(name, img_url, ingredient_category, active) VALUES (:name, :imgUrl, :ingredientCategory, :active)
sql.ingredient.update=UPDATE ingredient SET name = :name, img_url= img_url, ingredient_category= :ingredientCategory, active=:active WHERE id=:id
sql.ingredient.findById=SELECT * FROM ingredient WHERE id=?
sql.ingredient.rowCount=SELECT count(*) FROM ingredient WHERE name ILIKE CONCAT('%%', :searchText, '%%') AND (ingredient_category IN(:ingredientCategory) OR array_position(array[ :ingredientCategory ], NULL) IS NOT NULL) \
  AND (active=:status OR :status::boolean IS NULL)
sql.ingredient.findAllByFilter=SELECT * FROM ingredient WHERE name ILIKE CONCAT('%%', :searchText, '%%') AND (ingredient_category IN(:ingredientCategory) OR array_position(array[ :ingredientCategory ], NULL) IS NOT NULL) \
  AND (active=:status OR :status::boolean IS NULL) ORDER BY %s %s LIMIT :sizePage OFFSET :numPage
sql.ingredient.updateStatus=UPDATE ingredient SET active=? WHERE id=?

sql.ingredientCategory.findAll=SELECT * FROM ingredient_category ORDER BY name ASC


sql.friendship.findByFriendshipAccepted=SELECT id,first_name,last_name,birth_date,gender,img_url,account_role FROM account WHERE id!= ? AND id IN \
                                      (SELECT a.id FROM account a JOIN friendship f on f.inviter_id = a.id OR f.friend_id = a.id \
                                       WHERE (f.friend_id =? OR f.inviter_id =?) AND f.status = 'accepted') AND \
                                       (gender::text ILIKE CONCAT('%', ?, '%')) AND \
                                       (first_name  ILIKE CONCAT('%', ?, '%') OR last_name  ILIKE CONCAT('%', ?, '%')) \
                                        ORDER BY first_name order, last_name order LIMIT ? OFFSET ?


sql.friendship.countByFriendshipAccepted= SELECT COUNT(*) FROM account WHERE id!= ? AND id IN \
                                        (SELECT a.id FROM account a JOIN friendship f on f.inviter_id = a.id OR f.friend_id = a.id \
                                        WHERE (f.friend_id =? OR f.inviter_id =?) AND f.status = 'accepted') AND \
                                        (gender::text ILIKE CONCAT('%', ?, '%')) AND \
                                        (first_name  ILIKE CONCAT('%', ?, '%') OR last_name  ILIKE CONCAT('%', ?, '%')) 


sql.friendship.findAllNotFriends=SELECT id, first_name,last_name,birth_date,gender,img_url,account_role FROM account WHERE id!= ? \
                                        AND id NOT IN (SELECT a.id FROM account a JOIN friendship f on \
                                         f.inviter_id = a.id OR f.friend_id = a.id \
                                         WHERE (f.friend_id =? OR f.inviter_id =?)) AND \
                                         (gender::text ILIKE CONCAT('%', ?, '%')) AND \
                                         (first_name  ILIKE CONCAT('%', ?, '%') OR last_name  ILIKE CONCAT('%', ?, '%')) \
                                         ORDER BY first_name order, last_name order LIMIT ? OFFSET ?

sql.friendship.countAllNotFriends=SELECT COUNT(*) FROM account WHERE id!= ? \
                                        AND id NOT IN (SELECT a.id FROM account a JOIN friendship f on \
                                         f.inviter_id = a.id OR f.friend_id = a.id \
                                         WHERE (f.friend_id =? OR f.inviter_id =?)) AND \
                                         (gender::text ILIKE CONCAT('%', ?, '%')) AND \
                                         (first_name  ILIKE CONCAT('%', ?, '%') OR last_name  ILIKE CONCAT('%', ?, '%')) 

sql.friendship.findByFriendshipUnaccepted=SELECT id, first_name,last_name,birth_date,gender,img_url,account_role FROM account WHERE id IN \
                                       (SELECT inviter_id FROM friendship  WHERE friend_id =? AND status = 'unaccepted') AND \
                                       gender::text ILIKE CONCAT('%', ?, '%') AND \
                                       (first_name  ILIKE CONCAT('%', ?, '%') OR last_name  ILIKE CONCAT('%', ?, '%')) \
                                        ORDER BY first_name order, last_name order LIMIT ? OFFSET ?

sql.friendship.countByFriendshipUnaccepted= SELECT COUNT(*) FROM account WHERE id IN \
                                        (SELECT inviter_id FROM friendship  WHERE friend_id =? AND status = 'unaccepted') AND \
                                        gender::text ILIKE CONCAT('%', ?, '%') AND \
                                        (first_name  ILIKE CONCAT('%', ?, '%') OR last_name ILIKE CONCAT('%', ?, '%'))




sql.kitchenware.getAllCategories=SELECT category_name FROM kitchenware_category ORDER BY category_name ASC
sql.kitchenware.create = INSERT INTO kitchenware(name, img_url, category) VALUES (?, ?, ?) RETURNING id
sql.kitchenware.filter=SELECT id, name, img_url, category, active FROM kitchenware WHERE \
                            (category IN(:categories) OR array_position(array[ :categories ], NULL) IS NOT NULL) AND \
                            name ILIKE CONCAT('%%', :searchText, '%%') AND active = coalesce(:active, active)\
                            ORDER BY name %s, category %s LIMIT :pageSize OFFSET :offset
sql.kitchenware.getCount=SELECT COUNT(id) FROM kitchenware WHERE \
                            (category IN(:categories) OR array_position(array[ :categories ], NULL) IS NOT NULL) AND \
                            name ILIKE CONCAT('%%', :searchText, '%%') AND active = coalesce(:active, active)
sql.kitchenware.update = UPDATE kitchenware SET name = ?, img_url = ?, category = ? WHERE id = ?
sql.kitchenware.changeStatus = UPDATE kitchenware SET active = NOT active WHERE id = ?
sql.kitchenware.findById = SELECT id, name, img_url, category, active FROM kitchenware WHERE id = ?

sql.stock.create = INSERT INTO stock(account_id, ingr_id, amount) VALUES (?, ?, ?)
sql.stock.findById = SELECT * FROM stock WHERE id = ?
sql.stock.delete = DELETE FROM stock WHERE id = ?
sql.stock.deleteByAccountAndIngredient = DELETE FROM stock WHERE (account_id=? AND ingr_id=?)
sql.stock.updateAmountByAccountAndIngredient = UPDATE stock SET amount = ? WHERE (account_id=? AND ingr_id=?)

sql.stock.findByAccountAndIngredient=SELECT * FROM stock WHERE account_id=? AND ingr_id=?
sql.stock.update = UPDATE stock SET account_id=?, ingr_id=?, amount = ? WHERE id = ?
sql.stock.findAll = SELECT i.name, i.img_url, i.ingredient_category, s.amount, s.ingr_id as id FROM ingredient i JOIN stock s on s.ingr_id = i.id WHERE i.active = true AND \
                    s.account_id=:accountId AND  i.name ILIKE CONCAT('%', :search, '%')  AND \
                    (array_position(array[ :ingredientCategory ], NULL) IS NOT NULL OR ingredient_category IN(:ingredientCategory)) \
                     ORDER BY sortBy order LIMIT :limit OFFSET :currentPage;

sql.stock.countAll = SELECT COUNT (*) FROM ingredient i JOIN stock s on s.ingr_id = i.id WHERE i.active = true AND \
                                         (s.account_id=:accountId) AND  i.name ILIKE CONCAT('%', :search, '%')  AND \
                                         (array_position(array[ :ingredientCategory ], NULL) IS NOT NULL OR ingredient_category IN(:ingredientCategory));


sql.stock.findAllViableIngredients =  SELECT  * FROM ingredient WHERE id NOT IN ( SELECT i.id FROM ingredient i JOIN \
                                          stock s on s.ingr_id = i.id WHERE i.active = true AND s.account_id =:accountId ) AND  \
                                          name ILIKE CONCAT('%', :search, '%')  AND \
                                          (array_position(array[ :ingredientCategory ], NULL) IS NOT NULL OR ingredient_category IN(:ingredientCategory)) \
                                           ORDER BY sortBy order LIMIT :limit OFFSET :currentPage;

sql.stock.countAllViableIngredients = SELECT COUNT(*) FROM ingredient WHERE id NOT IN ( SELECT i.id FROM ingredient i JOIN \
                                           stock s on s.ingr_id = i.id WHERE i.active = true AND s.account_id =:accountId ) AND  \
                                           name ILIKE CONCAT('%', :search, '%')  AND \
                                           (array_position(array[ :ingredientCategory ], NULL) IS NOT NULL OR ingredient_category IN(:ingredientCategory));



sql.dish.createDish=INSERT INTO dish (id, dish_name, dish_category, img_url, description, receipt, dish_type) VALUES (default, ?, ?, ?, ?, ?, ?) RETURNING id
sql.dish.createDishIngredient=INSERT INTO dish_ingredient(amount, ingredient_id, dish_id) VALUES (?, ?, ?)
sql.dish.createDishKitchenware=INSERT INTO dish_kitchenware(amount, kitchenware_id, dish_id) VALUES (?, ?, ?)
#------------------------------
sql.dish.getKitchenwaresByDishId=SELECT k.*, d.amount FROM kitchenware k JOIN dish_kitchenware d ON k.id = d.kitchenware_id WHERE dish_id = ?
sql.dish.getIngredientsByDishId=SELECT i.*, d.amount FROM ingredient i JOIN dish_ingredient d ON i.id = d.ingredient_id WHERE dish_id = ?
sql.dish.getDishById=SELECT d.*,  \
                          COALESCE((SELECT dish_like FROM like_favorite WHERE dish_id = d.id AND account_id = ?), false) AS isLiked, \
                          COALESCE((SELECT favorite FROM like_favorite WHERE dish_id = d.id AND account_id = ?), false) AS isFavorite \
                          FROM dish d \
                          WHERE d.id = ?
#------------------------------
sql.dish.deleteById=delete from dish where id = ?
sql.dish.deleteIngredientsByDishId=delete from dish_ingredient where dish_id = ?
sql.dish.deleteKitchenwaresByDishId=delete from dish_kitchenware where dish_id = ?
#------------------------------
sql.dish.updateDish=UPDATE dish SET dish_name = ?, dish_category = ?, img_url = ?, description = ?,  receipt = ?, dish_type = ? WHERE id = ?
#------------------------------
sql.dish.countAll=SELECT COUNT(DISTINCT d.id) FROM dish d JOIN dish_ingredient i ON d.id = i.dish_id \
                            WHERE \
                            (dish_name ILIKE ? OR dish_type ILIKE ?) AND \
                            (? OR dish_category IN (%s)) AND \
                            (? OR i.ingredient_id IN (%s))
sql.dish.findAll=SELECT DISTINCT d.*,  \
                          COALESCE((SELECT dish_like FROM like_favorite WHERE dish_id = d.id AND account_id = ?), false) AS isLiked, \
                          COALESCE((SELECT favorite FROM like_favorite WHERE dish_id = d.id AND account_id = ?), false) AS isFavorite \
                          FROM dish d \
                          JOIN dish_ingredient i ON d.id = i.dish_id \
                          WHERE \
                          (dish_name ILIKE ? OR dish_type ILIKE ?) AND \
                          (? OR dish_category IN (%s)) AND \
                          (? OR i.ingredient_id IN (%s)) \
                          ORDER BY dish_name %s LIMIT ? OFFSET ?
#------------------------------
sql.dish.getAllCategories=SELECT name FROM dish_category ORDER BY name ASC
#------------------------------
sql.dish.countDishesByStock=SELECT COUNT(*) FROM ( \
                                SELECT DISTINCT d.*  \
                                FROM dish d  \
                                JOIN dish_ingredient i ON i.dish_id = d.id  \
                                JOIN stock s ON i.ingredient_id = s.ingr_id  \
                                WHERE   d.id NOT IN (  \
                                    SELECT d.id FROM dish d  \
                                    JOIN dish_ingredient i ON i.dish_id = d.id  \
                                    WHERE i.ingredient_id NOT IN (  \
                                        SELECT ingr_id FROM stock s  \
                                        JOIN dish_ingredient d ON d.ingredient_id = s.ingr_id  \
                                        WHERE s.account_id = ? AND \
                                        s.amount >= i.amount \
                            ))) x;
sql.dish.getDishesByStock=SELECT  DISTINCT d.*,   \
                                COALESCE((SELECT dish_like FROM like_favorite WHERE dish_id = d.id AND account_id = ?), false) AS isLiked,  \
                                COALESCE((SELECT favorite FROM like_favorite WHERE dish_id = d.id AND account_id = ?), false) AS isFavorite  \
                                FROM dish d  \
                                JOIN dish_ingredient i ON i.dish_id = d.id  \
                                JOIN stock s ON i.ingredient_id = s.ingr_id  \
                                WHERE   d.id NOT IN (  \
                                    SELECT d.id FROM dish d  \
                                    JOIN dish_ingredient i ON i.dish_id = d.id  \
                                    WHERE i.ingredient_id NOT IN (  \
                                        SELECT ingr_id FROM stock s  \
                                        JOIN dish_ingredient d ON d.ingredient_id = s.ingr_id  \
                                        WHERE s.account_id = ? AND \
                                        s.amount >= i.amount \
                                )) LIMIT ? OFFSET ?
#-------------------------------
sql.dish.upsertLike=INSERT INTO like_favorite(account_id, dish_id, dish_like, favorite) \
                            VALUES ((select id from credentials where email = ?), ?, ?, default)\
                            ON CONFLICT (dish_id, account_id) DO UPDATE \
                            SET dish_like = EXCLUDED.dish_like
sql.dish.upsertFavorite=INSERT INTO like_favorite(account_id, dish_id, dish_like, favorite) \
                            VALUES ((select id from credentials where email = ?), ?, default, ?)\
                            ON CONFLICT (dish_id, account_id) DO UPDATE \
                            SET favorite = EXCLUDED.favorite
#-------------------------------
sql.dish.countFavoriteDishes=SELECT COUNT(DISTINCT d.*) FROM dish d \
                            JOIN like_favorite l on l.dish_id = d.id \
                            JOIN credentials c on c.id = l.account_id \
                            WHERE l.favorite = true AND c.email = ?
sql.dish.getFavoriteDishes=SELECT DISTINCT d.*, l.dish_like AS is_liked, l.favorite AS is_favorite \
                            FROM dish d \
                            JOIN like_favorite l on l.dish_id = d.id \
                            JOIN credentials c on c.id = l.account_id \
                            WHERE l.favorite = true AND c.email = ? \
                            LIMIT ? OFFSET ?
#-------------------------------
sql.device.filter = SELECT DISTINCT * \
                          FROM device \
                          WHERE \
                          name ILIKE ? \
                          ORDER BY name %s LIMIT ? OFFSET ?

sql.device.countFiltered = SELECT DISTINCT COUNT (*) \
                          FROM device \
                          WHERE \
                          name ILIKE ?

sql.device.findById = SELECT id, name, os, os_min_version, os_max_version, chipset, fingerprint_scanner, \
                        face_recognition FROM device WHERE id = ?

sql.device.createDevice = INSERT INTO device (name, os, os_min_version, os_max_version, \
                            chipset, fingerprint_scanner, face_recognition) VALUES \
                            (?, ?::operating_system, ?, ?, ?, ?::fingerprint_sensor_type, ?::face_recognition_type) RETURNING id

sql.device.updateDevice = UPDATE device SET \
                        name = ?, os = ?::operating_system, os_min_version = ?, \
                        os_max_version = ?, chipset = ?, fingerprint_scanner = ?::fingerprint_sensor_type, \
                        face_recognition = ?::face_recognition_type WHERE id = ?

sql.device.deleteDevice = DELETE FROM device WHERE id = ?

sql.device.getOSes = SELECT unnest(enum_range(NULL::operating_system))::text  

sql.device.getFaceRecognitionTypes = SELECT unnest(enum_range(NULL::face_recognition_type))  

sql.device.getFingeprintSensorTypes = SELECT unnest(enum_range(NULL::fingerprint_sensor_type))  
#-------------------------------
sql.modelGeneration.generate = SELECT technique.id as technique_id, technique.name as technique_name, technique.description as technique_description, \
                                mitigation.id as mitigation_id, mitigation.name as mitigation_name, mitigation.description as mitigation_description \
                                FROM technique_mitigation \
                                INNER JOIN technique ON technique.id = technique_mitigation.technique_id \
                                INNER JOIN mitigation ON mitigation.id = technique_mitigation.mitigation_id \
                                INNER JOIN technique_applicability ON technique.id = technique_applicability.technique_id \
                                INNER JOIN applicability ON applicability.id = technique_applicability.applicability_id \
                                WHERE applicability_category IS NULL OR applicability_value IS NULL OR \
                                applicability_category = 'os' AND applicability_value = ? OR \
                                applicability_category = 'os_min_version' AND applicability_value <= ? \
                                AND applicability_value ILIKE CONCAT(?, '%') OR \
                                applicability_category = 'os_max_version' AND applicability_value >= ? \
                                AND applicability_value ILIKE CONCAT(?, '%') OR \
                                applicability_category = 'chipset' AND ? ILIKE '%' || applicability_value || '%' OR \
                                applicability_category = 'fingerprint_scanner' AND applicability_value = ? OR \
                                applicability_category = 'face_recognition' AND applicability_value = ?

sql.modelGeneration.createChecklist = INSERT INTO checklist (name, device_id, account_id) VALUES (?, ?, ?) RETURNING id

sql.modelGeneration.createChecklistEntriesBeginning = INSERT INTO checklist_entry \
                                                    (checklist_id, technique_id, mitigation_id, checked) VALUES 

sql.modelGeneration.createChecklistEntriesPart = (?, ?, ?, false),
#-------------------------------
sql.techniqueMitigation.findById = SELECT id, name, description FROM %s WHERE id = ?;

sql.techniqueMitigation.findLinksByIdAndEntity = SELECT %s.id, name, description FROM %s \
            INNER JOIN technique_mitigation ON %s.id = technique_mitigation.%s_id WHERE %s_id = ?

sql.techniqueMitigation.filter = SELECT DISTINCT * \
                          FROM  %s \
                          WHERE \
                          name ILIKE ? \
                          ORDER BY name %s LIMIT ? OFFSET ?

sql.techniqueMitigation.countFiltered = SELECT DISTINCT COUNT (*) \
                          FROM %s \
                          WHERE \
                          name ILIKE ?

sql.techniqueMitigation.delete = DELETE FROM %s WHERE id = ?

sql.techniqueMitigation.getApplicabilitiesForTechnique = SELECT \
                                                        r1.applicability_value as os, \
                                                        r2.applicability_value as os_min_version, \
                                                        r3.applicability_value as os_max_version, \
                                                        r4.applicability_value as chipset, \
                                                        r5.applicability_value as fingerprint_scanner, \
                                                        r6.applicability_value as face_recognition FROM \
                                                        (SELECT * FROM  technique_applicability as ta1 INNER JOIN applicability as ap1 ON ta1.applicability_id = ap1.id \
                                                        AND ap1.applicability_category = 'os' WHERE technique_id = ?) as r1 FULL OUTER JOIN \
                                                        (SELECT * FROM  technique_applicability as ta2 INNER JOIN applicability as ap2 ON ta2.applicability_id = ap2.id \
                                                        AND ap2.applicability_category = 'os_min_version' WHERE technique_id = ?) as r2 ON true FULL OUTER JOIN \
                                                        (SELECT * FROM  technique_applicability as ta3 INNER JOIN applicability as ap3 ON ta3.applicability_id = ap3.id \
                                                        AND ap3.applicability_category = 'os_max_version' WHERE technique_id = ?) as r3 ON true FULL OUTER JOIN \
                                                        (SELECT * FROM  technique_applicability as ta4 INNER JOIN applicability as ap4 ON ta4.applicability_id = ap4.id \
                                                        AND ap4.applicability_category = 'chipset' WHERE technique_id = ?) as r4 ON true FULL OUTER JOIN \
                                                        (SELECT * FROM  technique_applicability as ta5 INNER JOIN applicability as ap5 ON ta5.applicability_id = ap5.id \
                                                        AND ap5.applicability_category = 'fingerprint_scanner' WHERE technique_id = ?) as r5 ON true FULL OUTER JOIN \
                                                        (SELECT * FROM  technique_applicability as ta6 INNER JOIN applicability as ap6 ON ta6.applicability_id = ap6.id \
                                                        AND ap6.applicability_category = 'face_recognition' WHERE technique_id = ?) as r6 ON true

sql.techniqueMitigation.createTechniqueMitigation = INSERT INTO %s (name, description) VALUES (?, ?)

sql.techniqueMitigation.createApplicability = INSERT INTO applicability (applicability_category, applicability_value) VALUES (?, ?)

sql.techniqueMitigation.linkTechniqueApplicability = INSERT INTO technique_applicability (technique_id, applicability_id) VALUES (?, ?)

sql.techniqueMitigation.linkTechniqueMitigation = INSERT INTO technique_mitigation (technique_id, mitigation_id) VALUES (?, ?)
#-------------------------------
sql.checklist.findChecklistById = SELECT checklist.id, checklist.name, device.name as device_name, account_id \
                                    FROM checklist INNER JOIN device ON checklist.device_id = device.id \
                                    WHERE checklist.id = ? AND account_id = ?

sql.checklist.findEntriesByChecklistId = SELECT checklist_entry.id, checklist_id, \
                                            technique_id, technique.name as technique_name, technique.description as technique_description, \
                                            mitigation_id, mitigation.name as mitigation_name, mitigation.description as mitigation_description, checked \
                                            FROM checklist_entry \
                                            INNER JOIN technique ON technique.id = checklist_entry.technique_id \
                                            INNER JOIN mitigation ON mitigation.id = checklist_entry.mitigation_id \
                                            WHERE checklist_id = ? ORDER BY checklist_entry.id

sql.checklist.updateIsChecked = UPDATE checklist_entry SET checked = ? FROM checklist \
                                WHERE checklist_entry.checklist_id = checklist.id \
                                AND checklist_entry.id = ? AND account_id = ?

sql.checklist.findUserChecklists = SELECT checklist.id, checklist.name, device.name as device_name \
                                    FROM checklist INNER JOIN device ON checklist.device_id = device.id \
                                    WHERE account_id = ? AND checklist.name ILIKE ? ORDER BY checklist.name

sql.checklist.deleteChecklist = DELETE FROM checklist WHERE id = ? and account_id = ?

sql.checklist.updateChecklist = UPDATE checklist SET name = ? WHERE id = ? and account_id = ?